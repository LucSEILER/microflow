name: Release new version

on:
  push:
    tags:
      - '*'

jobs:
  release:
    name: Create Release
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Generate Release Notes
        run: |
          TAG_NAME=${{ github.ref_name }}
          echo "## Version $TAG_NAME" > release_notes.md
          echo "" >> release_notes.md
          cat CHANGELOG.md >> release_notes.md

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.ref }}
          name: Release ${{ github.ref_name }}
          body_path: release_notes.md
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.TOKEN_GITHUB }}

  docker-push:
    name: Push Docker images (backend & webapp)
    runs-on: ubuntu-latest
    needs: [release]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Docker Compose
        run: |
          sudo apt-get update
          sudo apt-get install -y docker-compose

      - name: Log in to Docker Hub
        run: echo "${{ secrets.DOCKER_HUB_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_HUB_USERNAME }}" --password-stdin

      - name: Build Docker Image
        run: docker-compose build

      - name: Tag Docker images with release tag
        run: |
          docker tag microflow-backend:latest ${{ secrets.DOCKER_HUB_USERNAME }}/microflow-backend:${{ github.ref_name }}
          docker tag microflow-webapp:latest ${{ secrets.DOCKER_HUB_USERNAME }}/microflow-webapp:${{ github.ref_name }}

      - name: Push Backend Image
        run: |
          docker push ${{ secrets.DOCKER_HUB_USERNAME }}/microflow-backend:${{ github.ref_name }}

      - name: Push Webapp Image
        run: |
          docker push ${{ secrets.DOCKER_HUB_USERNAME }}/microflow-webapp:${{ github.ref_name }}

  deploy:
    name: Deploy Docker images in production environment
    runs-on: ubuntu-latest
    needs: [docker-push]
    steps:
      - name: Deploy Docker images in production environment
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USERNAME }}
          password: ${{ secrets.VPS_PASSWORD }}
          script: |
            docker pull ${{ secrets.DOCKER_HUB_USERNAME }}/microflow-backend:${{ github.ref_name }}
            docker pull ${{ secrets.DOCKER_HUB_USERNAME }}/microflow-webapp:${{ github.ref_name }}
            docker run -d ${{ secrets.DOCKER_HUB_USERNAME }}/microflow-backend:${{ github.ref_name }}
            docker run -d ${{ secrets.DOCKER_HUB_USERNAME }}/microflow-webapp:${{ github.ref_name }}

  notify:
    name: Notify on Slack
    runs-on: ubuntu-latest
    needs: [docker-push, deploy]
    if: always()
    steps:
      - name: Send result to Slack Webhook
        if: always()
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        run: |
          STATUS="New version v${{ github.ref_name }} successfully deployed on VPS and Docker Hub"
          if [ "${{ job.status }}" != "success" ]; then
            STATUS="Failed to deploy new version v${{ github.ref_name }}"
          fi

          BRANCH_NAME="${{ github.ref_name }}"
          AUTHOR_NAME="${{ github.actor }}"
          REPO_URL="https://github.com/${{ github.repository }}"
          RUN_URL="https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"

          curl -X POST -H 'Content-type: application/json' --data "{
            \"text\": \"Pipeline *${{ github.workflow }}* finished with status: *$STATUS*\",
            \"blocks\": [
              {
                \"type\": \"section\",
                \"text\": {
                  \"type\": \"mrkdwn\",
                  \"text\": \":construction_worker: *CI/CD Pipeline Notification*\n\n*Repository*: <$REPO_URL|${{ github.repository }}>\n*Branch*: \`$BRANCH_NAME\`\n*Author*: \`$AUTHOR_NAME\`\n*Statut*: *$STATUS*\n*Workflow*: <$RUN_URL|See details>\"
                }
              }
            ]
          }" $SLACK_WEBHOOK_URL
