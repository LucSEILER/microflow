name: CI Pipeline

on:
  push:
    # branches:
    #   - main
    #   - dev
  pull_request:
    # branches:
    #   - main
    #   - dev

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '20'

      - name: Install dependencies
        run: |
          cd backend
          npm install

      - name: Run tests
        run: |
          cd backend
          npm test

      # - name: Build microservices
      #   run: |
      #     cd backend
      #     npm run 

      # - name: Log in to Docker Hub
      #   uses: docker/login-action@v2
      #   with:
      #     username: ${{ secrets.DOCKER_USERNAME }}
      #     password: ${{ secrets.DOCKER_PASSWORD }}

      # # Étape 6 : Construire et pousser l'image Docker
      # - name: Build and push Docker image
      #   run: |
      #     IMAGE_NAME=${{ secrets.DOCKER_IMAGE_NAME }}
      #     TAG=${{ github.sha }}
      #     # Construire l'image Docker
      #     docker build -t $IMAGE_NAME:$TAG ./backend
      #     # Ajouter le tag "latest"
      #     docker tag $IMAGE_NAME:$TAG $IMAGE_NAME:latest
      #     # Pousser les deux tags sur Docker Hub
      #     docker push $IMAGE_NAME:$TAG
      #     docker push $IMAGE_NAME:latest

  analyze:
    name: Build and analyze on Sonar
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - uses: sonarsource/sonarqube-scan-action@v3
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}

  notify:
    name: Notify on Slack
    runs-on: ubuntu-latest
    needs: [build, analyze]
    if: always()
    steps:
      - name: Send result to Slack Webhook
        if: always()
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        run: |
          STATUS="success"
          if [ "${{ job.status }}" != "success" ]; then
            STATUS="failure"
          fi

          BRANCH_NAME="${{ github.ref_name }}"
          AUTHOR_NAME="${{ github.actor }}"
          REPO_URL="https://github.com/${{ github.repository }}"
          RUN_URL="https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"

          curl -X POST -H 'Content-type: application/json' --data "{
            \"text\": \"Pipeline *${{ github.workflow }}* a terminé avec le statut: *$STATUS*\",
            \"blocks\": [
              {
                \"type\": \"section\",
                \"text\": {
                  \"type\": \"mrkdwn\",
                  \"text\": \":construction_worker: *CI/CD Pipeline Notification*\n\n*Repository*: <$REPO_URL|${{ github.repository }}>\n*Branch*: \`$BRANCH_NAME\`\n*Author*: \`$AUTHOR_NAME\`\n*Statut*: *$STATUS*\n*Workflow*: <$RUN_URL|Voir les détails>\"
                }
              }
            ]
          }" $SLACK_WEBHOOK_URL
      
        
    # old
  # notify:
  #   name: Notify on Discord
  #   runs-on: ubuntu-latest
  #   needs: [build, analyze]
  #   steps:
  #     - name: Send result to Discord Webhook
  #       if: always()
  #       run: |
  #         RESULT=$(if [ ${{ steps.build.outcome }} == 'success' ]; then echo "Build Passed"; else echo "Build Failed"; fi)
  #         curl -X POST -H "Content-Type: application/json" \
  #           -d '{"content": "CI Build Result: '"$RESULT"' on branch '${GITHUB_REF}'made by '${GITHUB_ACTOR}'" }' \
  #           ${{ secrets.DISCORD_WEBHOOK_URL }}


      # - name: Send result to Discord Webhook
      #   if: always()
      #   run: |
      #     RESULT=$(if [ ${{ steps.tests.outcome }} == 'success' ]; then echo "Tests Passed"; else echo "Tests Failed"; fi)
      #     curl -X POST -H "Content-Type: application/json" \
      #       -d '{"content": "CI Test Results: '"$RESULT"' on branch '${GITHUB_REF}'made by '${GITHUB_ACTOR}'" }' \
      #       ${{ secrets.DISCORD_WEBHOOK_URL }}
