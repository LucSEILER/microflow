name: CI Pipeline

on:
  push:
    # branches:
    #   - main
    #   - dev
  pull_request:
    # branches:
    #   - main
    #   - dev

jobs:
  build:
    name: Build & test application
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '20'

      - name: Install backend dependencies
        run: |
          cd backend
          npm install

      - name: Run backend tests
        run: |
          cd backend
          npm test

      - name: Install webapp dependencies
        run: |
          cd webapp
          npm install

      - name: Build webapp
        run: |
          cd webapp
          npm run build --if-present

  # analyze:
  #   name: Code analyze on SonarQube
  #   runs-on: ubuntu-latest
    
  #   steps:
  #     - uses: actions/checkout@v4
  #       with:
  #         fetch-depth: 0
  #     - uses: sonarsource/sonarqube-scan-action@v3
  #       env:
  #         SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
  #         SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
  
  docker-push:
    name: Push Docker images (backend & webapp)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Docker Compose
        run: |
          sudo apt-get update
          sudo apt-get install -y docker-compose

      - name: Log in to Docker Hub
        run: echo "${{ secrets.DOCKER_HUB_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_HUB_USERNAME }}" --password-stdin

      - name: Build Docker Image
        run: docker-compose build

      - name: Push Backend Image
        run: |
          docker push ${{ secrets.DOCKER_HUB_USERNAME }}/microflow-backend:latest

      - name: Push Webapp Image
        run: |
          docker push ${{ secrets.DOCKER_HUB_USERNAME }}/microflow-webapp:latest

  deploy:
    runs-on: ubuntu-latest
    needs: [docker-push]
    steps:
      - name: Deploy Docker images in production environment
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USERNAME }}
          password: ${{ secrets.VPS_PASSWORD }}
          script: |
            docker pull lucseiler/microflow-backend:latest
            docker pull lucseiler/microflow-webapp:latest
            docker run -d lucseiler/microflow-backend:latest
            docker run -d lucseiler/microflow-webapp:latest

  notify:
    name: Notify on Slack
    runs-on: ubuntu-latest
    # needs: [build, analyze, build-and-push, deploy]
    needs: [build, docker-push, deploy]
    if: always()
    steps:
      - name: Send result to Slack Webhook
        if: always()
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        run: |
          STATUS="success"
          if [ "${{ job.status }}" != "success" ]; then
            STATUS="failure"
          fi

          BRANCH_NAME="${{ github.ref_name }}"
          AUTHOR_NAME="${{ github.actor }}"
          REPO_URL="https://github.com/${{ github.repository }}"
          RUN_URL="https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"

          curl -X POST -H 'Content-type: application/json' --data "{
            \"text\": \"Pipeline *${{ github.workflow }}* finished with status: *$STATUS*\",
            \"blocks\": [
              {
                \"type\": \"section\",
                \"text\": {
                  \"type\": \"mrkdwn\",
                  \"text\": \":construction_worker: *CI/CD Pipeline Notification*\n\n*Repository*: <$REPO_URL|${{ github.repository }}>\n*Branch*: \`$BRANCH_NAME\`\n*Author*: \`$AUTHOR_NAME\`\n*Statut*: *$STATUS*\n*Workflow*: <$RUN_URL|See details>\"
                }
              }
            ]
          }" $SLACK_WEBHOOK_URL
